// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SINCRODEService.Models;

namespace SINCRODEService.Migrations
{
    [DbContext(typeof(SINCRODEDBContext))]
    [Migration("20191217070421_MyFifthMigration")]
    partial class MyFifthMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("db_datareader")
                .HasAnnotation("ProductVersion", "3.1.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SINCRODEService.Models.TblEmpleados", b =>
                {
                    b.Property<int>("IdEmp")
                        .HasColumnName("ID_EMP")
                        .HasColumnType("int")
                        .HasComment("Id del empleado. Se utilizará como identificativo único del registro");

                    b.Property<string>("Ad")
                        .HasColumnName("AD")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Columna sin nombre")
                        .HasMaxLength(50);

                    b.Property<string>("ApellidosEmp")
                        .IsRequired()
                        .HasColumnName("Apellidos_EMP")
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Contiene el Apellido del empleado")
                        .HasMaxLength(100);

                    b.Property<string>("ApellidossupEmp")
                        .HasColumnName("ApellidosSup_EMP")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("")
                        .HasMaxLength(50);

                    b.Property<string>("CodcenEmp")
                        .HasColumnName("CODCEN_EMP")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Código identificativo del Centro de Trabajo")
                        .HasMaxLength(50);

                    b.Property<int>("CodcontratoEmp")
                        .HasColumnName("CodContrato_EMP")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<string>("CoddepEmp")
                        .HasColumnName("CodDept_EMP")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Código del Departamento del empleado")
                        .HasMaxLength(50);

                    b.Property<string>("CodnegocioEmp")
                        .HasColumnName("CodNegocio_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("")
                        .HasMaxLength(20);

                    b.Property<string>("CodsociedadEmp")
                        .HasColumnName("CodSociedad_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("")
                        .HasMaxLength(20);

                    b.Property<string>("CodsubnegocioEmp")
                        .HasColumnName("CodSubnegocio_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("")
                        .HasMaxLength(20);

                    b.Property<int>("CojornadaEmp")
                        .HasColumnName("CoJornadaEsp_EMP")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<int>("Coworking_EMP")
                        .HasColumnType("int");

                    b.Property<string>("DesccentrabajoEmp")
                        .HasColumnName("DescCentrabajo_EMP")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("")
                        .HasMaxLength(50);

                    b.Property<string>("DescdepEmp")
                        .HasColumnName("DescDpto_EMP")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Descripción o Nombre del Departamento del empleado")
                        .HasMaxLength(50);

                    b.Property<string>("Descnegocio")
                        .HasColumnName("DescNegocio")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("")
                        .HasMaxLength(50);

                    b.Property<string>("DescsociedadEmp")
                        .HasColumnName("DescSociedad_EMP")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("")
                        .HasMaxLength(50);

                    b.Property<string>("DescsubnegocioEmp")
                        .HasColumnName("DescSubnegocio_EMP")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("")
                        .HasMaxLength(50);

                    b.Property<string>("DniEmp")
                        .IsRequired()
                        .HasColumnName("DNI_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Identificación fiscal del empleado")
                        .HasMaxLength(20);

                    b.Property<string>("IdoracleEmp")
                        .IsRequired()
                        .HasColumnName("IDOracle_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Identificador del empleado en la BD de Oracle")
                        .HasMaxLength(20);

                    b.Property<int>("JornlaboralDomingo")
                        .HasColumnName("JornLaboralDomingo")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<int>("JornlaboralFestivo")
                        .HasColumnName("JornLaboral_Festivo")
                        .HasColumnType("int")
                        .HasComment("Indica si la jornada laboral es festiva");

                    b.Property<int>("JornlaboralJueves")
                        .HasColumnName("JornLaboralJueves")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<int>("JornlaboralLunes")
                        .HasColumnName("JornLaboralLunes")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<int>("JornlaboralMartes")
                        .HasColumnName("JornLaboralMartes")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<int>("JornlaboralMiercoles")
                        .HasColumnName("JornLaboralMiercoles")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<int>("JornlaboralSabado")
                        .HasColumnName("JornLaboralSabado")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<int>("JornlaboralViernes")
                        .HasColumnName("JornLaboralViernes")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<string>("NombreEmp")
                        .IsRequired()
                        .HasColumnName("Nombre_EMP")
                        .HasColumnType("nvarchar(100)")
                        .HasComment("Contiene el nombre del empleado")
                        .HasMaxLength(100);

                    b.Property<string>("NombresupEmp")
                        .HasColumnName("NombreSup_EMP")
                        .HasColumnType("nvarchar(50)")
                        .HasComment("")
                        .HasMaxLength(50);

                    b.Property<string>("NumeroEmp")
                        .IsRequired()
                        .HasColumnName("Numero_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Número único de empleado")
                        .HasMaxLength(20);

                    b.Property<string>("PNRSupEmp")
                        .HasColumnName("PNRSup_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("")
                        .HasMaxLength(20);

                    b.Property<double>("PorcenjornadaEmp")
                        .HasColumnName("PorcenJornada_EMP")
                        .HasColumnType("double")
                        .HasComment("");

                    b.Property<int>("TipocontratoEmp")
                        .HasColumnName("TipoContrato_EMP")
                        .HasColumnType("int")
                        .HasComment("");

                    b.Property<string>("UbicenEmp")
                        .HasColumnName("UbiCentrabajo_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Nomenclatura de la ubicación del Centro de trabajo")
                        .HasMaxLength(20);

                    b.HasKey("IdEmp");

                    b.ToTable("TBL_EMPLEADOS","dbo");
                });

            modelBuilder.Entity("SINCRODEService.Models.TblMarcajeprocesado", b =>
                {
                    b.Property<int>("IdMar")
                        .HasColumnName("ID_MAR")
                        .HasColumnType("int")
                        .HasComment("Id del marcaje registrado. Se utilizará como identificativo único del registro");

                    b.Property<string>("CodTarjetaMar")
                        .IsRequired()
                        .HasColumnName("CodTarjeta_MAR")
                        .HasColumnType("nvarchar(10)")
                        .HasComment("Codigo de la tarjeta utilizada")
                        .HasMaxLength(10);

                    b.Property<string>("DniEmp")
                        .IsRequired()
                        .HasColumnName("DNI_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("DNI del empleado según PersonasT")
                        .HasMaxLength(20);

                    b.Property<DateTime>("FechaMarcajeMar")
                        .HasColumnName("FechaMarcaje_MAR")
                        .HasColumnType("datetime")
                        .HasComment("Fecha de registro de acceso DD/MM/YYYY HH:MM");

                    b.Property<int>("IdEmp")
                        .HasColumnName("ID_EMP")
                        .HasColumnType("int")
                        .HasComment("Id del empleado. Se relaciona con el de la tabla TBL_EMPLEADOS");

                    b.Property<string>("IdLectorMar")
                        .IsRequired()
                        .HasColumnName("IdLector_MAR")
                        .HasColumnType("varchar(15)")
                        .HasComment("Codigo del lector")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<int>("IdPro")
                        .HasColumnName("ID_PRO")
                        .HasColumnType("int")
                        .HasComment("Identificador del Proceso realizado");

                    b.Property<string>("NombreLectorMar")
                        .IsRequired()
                        .HasColumnName("NombreLector_MAR")
                        .HasColumnType("varchar(40)")
                        .HasComment("Nombre del lector")
                        .HasMaxLength(40)
                        .IsUnicode(false);

                    b.Property<string>("NumeroEmp")
                        .IsRequired()
                        .HasColumnName("Numero_EMP")
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Numero de Empleado obtenido de la consulta a Dassnet")
                        .HasMaxLength(20);

                    b.Property<int>("NumeroMensajeMar")
                        .HasColumnName("NumeroMensaje_MAR")
                        .HasColumnType("int")
                        .HasComment("Número del mensaje");

                    b.Property<string>("TextoMensajeMar")
                        .IsRequired()
                        .HasColumnName("TextoMensaje_MAR")
                        .HasColumnType("varchar(60)")
                        .HasComment("Texto del Mensaje")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.HasKey("IdMar");

                    b.HasIndex("IdEmp");

                    b.HasIndex("IdPro");

                    b.ToTable("TBL_MARCAJEPROCESADO","dbo");
                });

            modelBuilder.Entity("SINCRODEService.Models.TblProcesos", b =>
                {
                    b.Property<int>("IdPro")
                        .HasColumnName("ID_PRO")
                        .HasColumnType("int")
                        .HasComment("Id del proceso realizado. Se utilizará como identificativo único del registro");

                    b.Property<bool?>("AutoPro")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AUTO_PRO")
                        .HasColumnType("bit")
                        .HasDefaultValueSql("((1))")
                        .HasComment("Si el proceso es automático o no, 1- SINCRONIZADORDE ó 2- VIEWERDE");

                    b.Property<int>("EmpleadosPro")
                        .HasColumnName("Empleados_PRO")
                        .HasColumnType("int")
                        .HasComment("Número de empleados procesados");

                    b.Property<int>("ErroresPro")
                        .HasColumnName("Errores_PRO")
                        .HasColumnType("int")
                        .HasComment("Numero de errores, 0 en caso de éxito");

                    b.Property<DateTime>("FechaFinPro")
                        .HasColumnName("FechaFin_PRO")
                        .HasColumnType("datetime")
                        .HasComment("Fecha y hora en que se finaliza el proceso DD/MM/YYYY HH:MM");

                    b.Property<DateTime>("FechaIniPro")
                        .HasColumnName("FechaIni_PRO")
                        .HasColumnType("datetime")
                        .HasComment("Fecha y hora en que se inicia el proceso DD/MM/YYYY HH:MM");

                    b.Property<int>("RegistrosPro")
                        .HasColumnName("Registros_PRO")
                        .HasColumnType("int")
                        .HasComment("Numero de registros procesados");

                    b.HasKey("IdPro");

                    b.ToTable("TBL_PROCESOS","dbo");
                });

            modelBuilder.Entity("SINCRODEService.Models.TblProcesoslog", b =>
                {
                    b.Property<int>("IdProlog")
                        .HasColumnName("ID_PROLOG")
                        .HasColumnType("int")
                        .HasComment("Id del log registrado tras la ejecución de un proceso. Se utilizará como identificativo único del registro");

                    b.Property<string>("DescProlog")
                        .HasColumnName("DESC_PROLOG")
                        .HasColumnType("text")
                        .HasComment("Descripción del Error en el empleado");

                    b.Property<string>("ExcProlog")
                        .HasColumnName("EXC_PROLOG")
                        .HasColumnType("text")
                        .HasComment("Descripción de la Excepción del error en la operación realizada");

                    b.Property<DateTime>("FechaIniPro")
                        .HasColumnName("FechaIni_PRO")
                        .HasColumnType("datetime")
                        .HasComment("Fecha y hora en que se inicia el proceso");

                    b.Property<int>("IdEmp")
                        .HasColumnName("ID_EMP")
                        .HasColumnType("int")
                        .HasComment("Id del empleado según TBL_EMPLEADO");

                    b.Property<int>("IdPro")
                        .HasColumnName("ID_PRO")
                        .HasColumnType("int")
                        .HasComment("Identificador del Proceso realizado");

                    b.HasKey("IdProlog");

                    b.HasIndex("IdEmp");

                    b.HasIndex("IdPro");

                    b.ToTable("TBL_PROCESOSLOG","dbo");
                });

            modelBuilder.Entity("SINCRODEService.Models.TblMarcajeprocesado", b =>
                {
                    b.HasOne("SINCRODEService.Models.TblEmpleados", "IdEmpNavigation")
                        .WithMany("TblMarcajeprocesado")
                        .HasForeignKey("IdEmp")
                        .HasConstraintName("FK_TBL_MARCAJEPROCESADO_TBL_EMPLEADOS")
                        .IsRequired();

                    b.HasOne("SINCRODEService.Models.TblProcesos", "IdProNavigation")
                        .WithMany("TblMarcajeprocesado")
                        .HasForeignKey("IdPro")
                        .HasConstraintName("FK_TBL_MARCAJEPROCESADO_TBL_PROCESOS")
                        .IsRequired();
                });

            modelBuilder.Entity("SINCRODEService.Models.TblProcesoslog", b =>
                {
                    b.HasOne("SINCRODEService.Models.TblEmpleados", "IdEmpNavigation")
                        .WithMany("TblProcesoslog")
                        .HasForeignKey("IdEmp")
                        .HasConstraintName("FK_TBL_PROCESOSLOG_TBL_EMPLEADOS")
                        .IsRequired();

                    b.HasOne("SINCRODEService.Models.TblProcesos", "IdProNavigation")
                        .WithMany("TblProcesoslog")
                        .HasForeignKey("IdPro")
                        .HasConstraintName("FK_TBL_PROCESOSLOG_TBL_PROCESOS")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
